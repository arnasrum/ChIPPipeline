import sys

sys.path.append("workflow/scripts")
from sample_file_scripts import get_all_sample_file_paths, get_file_names, get_macs_input
from set_module_options import set_module_options

configfile: "config/config.yml"
set_module_options(config)

module utils:
    snakefile: "rules/utils.smk"
    config: config

module QA:
    snakefile: "rules/fastqc.smk"
    config: config

module downloadWorkflow:
    snakefile: "rules/download.smk"
    config: config

module trimWorkflow:
    snakefile: "rules/trim.smk"
    config: config

module alignmentWorkflow:
    snakefile: "rules/align.smk"
    config: config

module peakCallingWorkflow:
    snakefile: "rules/peak_calling.smk"
    config: config

module data_analysis:
    snakefile: "rules/data_analysis.smk"
    config: config

use rule * from utils as utils_*
use rule * from QA as qa_*
use rule * from downloadWorkflow as download_*
use rule * from trimWorkflow as trim_*
use rule * from alignmentWorkflow as align_*
use rule * from peakCallingWorkflow as peak_calling_*
use rule * from data_analysis as data_analysis_*

rule downloadSamples:
    input:
        *get_all_sample_file_paths(config)

trimmer = config["trimmer"]
rule trim:
    input:
        [*map(lambda file_name: f"results/{trimmer}/{file_name}", get_all_sample_file_paths(config, include_directories=False))],
        [*map(lambda file_name: f"results/fastqc/{trimmer}/{file_name[:-8]}_1_fastqc.html", get_all_sample_file_paths(config, include_directories=False))]

aligner = config["aligner"]
rule align:
    input:
        [*map(lambda file_name: f"results/{aligner}/{file_name[:-8]}.bam", get_all_sample_file_paths(config, include_directories=False)[::2])]

rule pre_preprocessing:
    input:
        [*map(lambda file_name: f"results/picard-MarkDuplicates/{file_name[:-8]}.bam",get_all_sample_file_paths(config, include_directories=False)[::2])],
        [*map(lambda file_name: f"results/samtools-index/{file_name[:-8]}.bam.bai",get_all_sample_file_paths(config,include_directories=False)[::2])]

rule macs:
    input:
        f"results/macs3/H3K4me3_8cell_rep1_peaks.xls",
        f"results/macs3/H3K4me3_8cell_rep2_peaks.xls",
        [*map(lambda file_name: f"results/deeptools-bamCoverage/{file_name[:-8]}.bw",get_all_sample_file_paths(config,include_directories=False)[::2])]

def get_deeptools_input():
    macs_input = get_macs_input()
    input_files = []
    for key, value in macs_input.items():
        for replicate in value:
            input_files.append(f"results/deeptools/{key}_rep{replicate}_heatmap.png")
            input_files.append(f"results/deeptools/{key}_rep{replicate}_profile.png")
            input_files.append(f"results/pyGenomeTracks/{key}_rep{replicate}.png")
        input_files.append(f"results/bedtools/{key}.consensusPeak")
    return input_files

rule deeptools:
    input:
        get_deeptools_input()
