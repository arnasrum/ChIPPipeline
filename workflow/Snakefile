import sys
sys.path.append("workflow/scripts")
from sample_file_scripts import SampleFileScripts
from set_module_options import set_module_options
from input_scripts import get_macs_input

configfile: "config/config.yml"
set_module_options(config)
for key in ["json_path", "benchmarks_path", "results_path", "resources_path", "temp_path"]:
    config[key] = config["prefix"] + config[key]
sfs = SampleFileScripts(config)
sfs.make_sample_info(config["json_path"])


module utils:
    snakefile: "rules/utils.smk"
    config: config

module QA:
    snakefile: "rules/fastqc.smk"
    config: config

module downloadWorkflow:
    snakefile: "rules/download.smk"
    config: config

module trimWorkflow:
    snakefile: "rules/trim.smk"
    config: config

module alignmentWorkflow:
    snakefile: "rules/align.smk"
    config: config

module peakCallingWorkflow:
    snakefile: "rules/peak_calling.smk"
    config: config

module data_analysis:
    snakefile: "rules/data_analysis.smk"
    config: config

use rule * from utils as utils_*
use rule * from QA as qa_*
use rule * from downloadWorkflow as download_*
use rule * from trimWorkflow as trim_*
use rule * from alignmentWorkflow as align_*
use rule * from peakCallingWorkflow as peak_calling_*
use rule * from data_analysis as data_analysis_*

macs_input = get_macs_input(config["json_path"])
def get_deeptools_input():
    input_files = []
    path = config["results_path"]
    for key, value in macs_input.items():
        for replicate in value:
            input_files.append(f"{path}/deeptools/{key}_rep{replicate}_heatmap.png")
            input_files.append(f"{path}/deeptools/{key}_rep{replicate}_profile.png")
            input_files.append(f"{path}/pyGenomeTracks/{key}_rep{replicate}.png")
    return input_files

rule all:
    input:
        [*map(lambda sample: f"results/homer/{sample}/homerResults.html",macs_input.keys())],
        get_deeptools_input()
    default_target: True
